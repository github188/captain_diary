设计3种架构体系,让他们分别满足CAP理论的CA架构,AP架构和CP架构.

2014年3月11日	| scholar ∇ 发表评论(0) ⊕ 查看评论
【本文为原创或者经过作者实验验证，作者：书生的学习笔记，转载请务必注明】

本文链接地址: http://www.gscholar.cn/2014/03/cap.html

  CAP理论：CAP的含义是Consistency, Availability, Partition-tolerance也就是一致性、可用性以及分区宽容性。

1、Consistency，见我的描述：http://www.gscholar.cn/2014/03/acid.html

2、Availability 是指所有的读和写都必须要能终止。Partition-tolerance 指系统中会任意的丢失报文(这和“最终会有一个报文会到达”是相对的)。

   CAP 理论说在一个系统中对某个数据不存在一个算法同时满足 Consistency, Availability, Partition-tolerance 。就是说在一个系统中，可以对某些数据做到 CP, 对另一些数据做到 AP，就算是对同一个数据，调用者可以指定不同的算法，某些算法可以做到 CP，某些算法可以做到 AP。

   要做到CP， 系统可以把这个数据只放在一个节点上，其他节点收到请求后向这个节点读或写数据，并返回结果。很显然，串行化是保证的。但是如果报文可以任意丢失的话，接受请求的节点就可能永远不返回结果。

   考虑CA，这就是传统上的关系型数据库(RMDB).

   考虑CP，主要是一些Key-value数据库，典型代表为google的Big Table

   考虑AP，主要是一些面向文档的适用于分布式系统的数据库，如SimpleDB。

   CP和AP该如何设计呢？引用Alantany的话：“CAP理论提出就是针对分布式数据库环境的，所以，P这个属性是必须具备的。P就是在分布式环境中，由于网络的问题可能导致某个节点和其它节点失去联系，这时候就形成了P(partition)，也就是由于网络问题，将系统的成员隔离成了2个区域，互相无法知道对方的状态，这在分布式环境下是非常常见的。因为P是必须的，那么我们需要选择的就是A（Availability）和C（Consistency）。在分布式环境下，为了保证系统可用性，通常都采取了复制的方式，避免一个节点损坏，导致系统不可用。那么就出现了每个节点上的数据出现了很多个副本的情况，而数据从一个节点复制到另外的节点时需要时间并且要求网络畅通的。所以，当P（Partition-tolerance）发生时，也就是无法向某个节点复制数据时，这时候你有两个选择：选择可用性 A（Availability），此时，那个失去联系的节点依然可以向系统提供服务，不过它的数据就不能保证是同步的了（失去了C（Consistency）属性）。选择一致性C（Consistency）为了保证数据库的一致性，我们必须等待失去联系的节点恢复过来，在这个过程中，那个节点是不允许对外提供服务的，这时候系统处于不可用状态(失去了A（Availability）属性)。最常见的例子是读写分离，某个节点负责写入数据，然后将数据同步到其它节点，其它节点提供读取的服务，当两个节点出现通信问题时，你就面临着选择A（继续提供服务，但是数据不保证准确）或者C（用户处于等待状态，一直等到数据同步完成）。”

AP和CP该如何取舍呢？ 我觉得可以根据不同的业务场景做不同的处理。

CP对系统的一致性要求较高如ERP系统，OA系统。总之是“牵一发而动全身”的系统使用。

AP系统可以允许不一致。比如微博系统。
