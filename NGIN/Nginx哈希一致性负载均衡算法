http://blog.csdn.net/cywosp/article/details/23397179

这篇文章的解读，里面的图如果看顺了，还是属于画的比较好的。

首先说，他要解决什么问题，要解决的是负载均衡hash算法不一致的问题，怎么就不一致了。
我们之前的算法是这样是的。跟HashMap里面决定被分配在哪一个Table数组哪一个元素下面的算法一样，可以形象的写成hash(object)%N,N为负载的个数，
或者在HashMap
叫table数组的长度。
在负载均衡里面，假设一个节点挂掉了，那么这个N的值就会减一，那么所有的请求基于IP或者cookie里面的sessionId计算你的hash值是不会变化的，但是由于N值减一了，
基于hash(object)%N这个算法，会导致所有请求都会被重新分配到新的负载节点上，这个就叫做hash不一致，如何做到一个节点挂了，其他节点的请求还是被分配到
原来的节点呢。
这个就是我们的主角，hash一致性算法被创造的意义所在。
我们先将所有的负载以他们的某个属性计算一个hash值出来，然后假想他们分配在一个首尾相连的环形数轴上面，这个数轴的最小值为0，最大值为2^32-1，一共2^32个
数字节点，构成一个哈希环。
好，我们基于请求计算出来的hash值，就不再用原来的hash(object)%N这个算法了，而是使用就近原则，看它更靠近环上的哪一个值，就将请求交给这个负载来处理。
这样的，来看看能否保证hash一致性，假设某个节点挂掉了，别的节点的请求不会手影响，因为他们在hash环上的位置是没有动的，一切照旧，只有挂掉的这个节点需要
根据就近原则重新找节点。
为什么一定要是环，为了避免破坏就近原则，你懂得。
关于hash,我们几乎说完了这东西，还差一点点，就是redis里面的hash是个什么东东。





