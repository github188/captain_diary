第一眼看到这个方法的时候，感觉非常奇葩，为什么呢》这个方法居然没有实现代码。
不过有个特别的地方，这个方法前面有个native修饰。
public native int hashCode();   后面是分号，结束了。
根据这个方法的声明可知，该方法返回一个int类型的数值，并且是本地方法，因此在Object类中并没有给出具体的实现。但是必须必须知道这个返回的是地址值对应的整数
对一个比较大但不是非常大的除数取余数得到的结果。既然是这样，那么就很有可能出现不同对象的hashCode值是一样的，也就是这两个对象很有缘分的被分到了一个
组里面，这个组的名字就是他们的hashCode值。
纠正以前的一个错误想法，包括估计现在很多人都还是这么错误的任务，一个对象的hashCode就是他的地址值，就是唯一的，每两个对象的hashCode都不可能相同，
现在想想这种想法真的很楼逼，hashCode是什么，我觉得可以叫他小组编号。既然是小组，那么小组就不会只有一个人，一个对象。几乎所有人在这个问题上的认识都是错误
的，认为hashCode（）就是对象的唯一识别值。、

-------------再来说说对象的hashCode在程序中的作用----------
简单概括一下，就是判断重复元素，比如容器中是不能存放重复对象的，已经存放了1万个对象，不使用hashCode的情况下，怎么处理呢，一个一个比较吧。时间复杂度是
O(N),N是对象个数，时间复杂度随着N的增加线性增加。那现在假设我用散列集合来做，HashMap，这个里面第一层结构是一个table[]数组，这个数组里面每一个元素存放
的是该组对象的hashCode（其实这种说法是错误的，是对hanCode处理后的一个hash值，看下面的算法），也就是说，这个组里面的所有对象的hashCode都是这个值，
外面的元素想要存进来，首先必须比较hashCode是否一样。这样的话，就把大多数
的想要加进来的对象都拒之门外了（就好像马未都说的，他做编辑，看稿，先把大多数的稿件给突突了）。顺便再往下说一句话，如果外面想加进来的hashCode与该组
吻合，那么再用equals（）方法比较地址值（用双等号==）就行了。这样
就大大降低了时间复杂度。

所以，总结来看，hashCode的比较是一个比较粗犷的比较，equals的比较是一个精细的比较。如果hashCode相等，那么equals（）不一定相等，为什么，他有可能是
同一组下面的不同元素，但是如果equals（）相等的话，hashCode有必要让他相等，（这是Object源码中的要求， <li>If two objects are equal according to
the {@code equals(Object)}
     *     method, then calling the {@code hashCode} method on each of
     *     the two objects must produce the same integer result.）
     所以说当你重写了equals方法的时候，比如String，非常有必要重写hashCode，让两个equals（）相等的对象，保持hashCode相等。
     
http://blog.csdn.net/fenglibing/article/details/8905007

http://www.cnblogs.com/dolphin0520/p/3681042.html

http://blog.csdn.net/hahalzb/article/details/6415360

https://www.zhihu.com/question/30301819


	static final int hash(Object key) {
        int h;
        return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);
    }
    
    为什么hashmap要这么处理，
    看下面文章
    http://blog.csdn.net/anxpp/article/details/51234835
    不懂就问问 动脑学院老师












