面向对象设计：
封装，继承，多态
接口或抽象类和他的实现类就实现了继承和多态    这个就是最基本的东西，好好想想这个，然后再一点点
拔高到设计模式  一个类的实例还可以是另一个类的成员变量 
再加上反射，基本就齐了。构成目前的这些框架，复杂到几年都想不清楚。说道这里我好想再回去温习一下
继承多态，反射和注解。
想想除了，接口，抽象类，实体类之间的组合能发生很多有趣的事情之外，再加上反射，注解能做的事情，那么这些
东西就太有意思了。五彩缤纷的世界，自己去文字总结吧，徐勇凌总结飞行2000多万字，这个怎么也要超过。

这篇文章讲了 很详细的自定义注解，可以看一下 http://www.jianshu.com/p/bbbc9f4c7887
我们学注解的目的是为了能看到框架源码，仅此而已，面试的时候可以很轻松通过。将来说不定也会装B在项目中
写一写注解，就这么简单，大把的时间，来学一学这个自定义注解吧。
### 
来讲讲这个话题：annotation跟comment有什么区别
comment，就是注释，只会存在于源码当中，不会存在于编译期和运行期，也就是说在编译的时候，会把注释
排除在正常代码之外。但是注解就不行，注解就是正常代码。编译期和运行期都会存在。
### 
注解按照使用的方式和用途，注解可以分为三大类。
（1）内建注解。
          内建注解也称为基本注解，位于java.lang包下。
          内建注解有三个：
          1，检验重写父类方法：@Override
          2，标识方法已经过时：@Deprecated
          3，取消编译器警告：@SurppressWarnings
（2）元注解。
          元注解就是在注解上添加的注解。
          位置：元注解位于java.lang.annotation子包中。
          作用：用于修饰其他注解。
          元注解有四个：
         @Retention，@Target，@Documented，@Inherited。
（3）自定义注解。
         需要用到关键字@interface来定义。
四个元注解的作用：
      @Retention：用来描述被修饰的注解的生命周期。
      @Target：用于指定被修饰的注解的适用范围，即被修饰的注解可以用来修饰哪些程序元素。
      @Documented：用于指定被修饰的注解将被javadoc工具提取成文档。
      @Inherited：用于指定被@Inherited修饰的注解具有继承性。
