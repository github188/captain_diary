code first 先看代码
为什么必须掌握注解，jdk1.5开始就支持注解了，这个也许是各个语言之间的相互抄袭也不一定。
java代码中用注解有三个步骤：1 定义注解。  2。使用注解  3.解析注解
掌握注解的理由：
1.只有掌握了注解才有可能读懂第三方框架的源码；
2.只有掌握了注解才能在编程中使用注解，让代码更简洁，好懂；
3.装逼。
定义：一种源程序中的元素，用来关联其他信息的途径和方法。
元注解：jdk自带的给注解进行注解的注解  @Target（重要,指定该注解用在类，方法上）  @Retention（重要） @Inherit（重要）（允许被该注解注解的类的
子类继承它的注解）
@Documented（不那么重要）
内建注解：jdk内部定义的业务注解（排除元注解）
解析注解，这才是重中之重，之前一直学到这里就放弃了。
概念：通过反射来获取类，函数，成员变量上的运行时注解信息，从而实现动态控制程序运行时的逻辑。
自定义注解
package com;
import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Inherited;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
@Target({ElementType.TYPE,ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
@Inherited
@Documented
public @interface Description {
	String value();
}
-------------------------
package com;
@Description("这是类Child，我是注解在type上面的")
public class Child{
	@Description("成员变量name:我叫你daddy")
	public String name() {
		return null;
	}
	public int age() {
		return 0;
	}
	@Deprecated
	public void sing() {
		System.out.println("sing a song");
	}
}
-----------------------------
package com;
import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
public class ParseAnnoDescrip {
	private static Description annotation;
	private static Method[] methods;
	private static Annotation[] annotations;
	public static void main(String[] args) {
		//1. 使用类加载器加载被注解的类
		Class<?> c = null;
		try {
			c = Class.forName("com.Child");
			System.out.println(c.getName());
		} catch (ClassNotFoundException e) {
			System.out.println("找不到这个类啊:com.Child");
		}
		boolean annotationPresent = c.isAnnotationPresent(Description.class);
		//判断这个类上面是否有Description
		if(annotationPresent) {
			annotation = c.getAnnotation(Description.class);
			System.out.println(annotation.value());
		}
		//找到方法上面的注解
		methods = c.getMethods();
		for (Method method : methods) {
			 annotationPresent = method.isAnnotationPresent(Description.class);
			if(annotationPresent) {
				Description methodAnno= method.getAnnotation(Description.class);
				System.out.println(methodAnno.value());
			}
			System.out.println("对方法注解的另一种解析方式");
		    annotations = method.getAnnotations();
		    for (Annotation ann : annotations) {
		    	if(ann instanceof Description) {
		    		System.out.println(((Description)ann).value());
		    	}
			}			
		}
	}
}



















