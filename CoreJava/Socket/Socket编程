https://www.cnblogs.com/linzheng/archive/2011/01/23/1942328.html

web容器  soa 都是用socket来达到网络通信的目的
http://blog.csdn.net/defonds/article/details/7971259   手写httpserver前需要用这个项目来热身一下

五一假期，花了半天时间，把这个socket又温习了一遍，之前在同富裕工业城的时候，没有这么淡定的学过这块的知识，现在等于是还债。



先贴代码在这里吧。
没有使用多线程的代码  ，两个类，1 Server.java 2 Client.java 
---------------------
package com;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
public class Server {
	public static void main(String[] args) {
		InputStream inputStream = null;
		InputStreamReader isr = null;
		BufferedReader br = null;
		ServerSocket serverSocket = null;
		Socket socket = null;
		try {
			serverSocket = new ServerSocket(8888);
			System.err.println("服务器即将启动");
			socket = serverSocket.accept();
			//获取输入流，读取客户端信息
			 inputStream = socket.getInputStream();
//			 将字节流转换为字符流
			 isr = new InputStreamReader(inputStream);
			 //为输入流添加缓存
			 br = new BufferedReader(isr);
			 //按行读取
			 String info = null;
			 while((info = br.readLine()) !=null ) {
				 System.out.println("我是服务端，接收到客户端信息："+info);
			 }
			//获取输出流，想客户端发送消息  
				OutputStream os = socket.getOutputStream();
				//将输出流包装为打印流
				PrintWriter pw = new PrintWriter(os);
				pw.write("我是服务端，欢迎你");
				pw.flush();
				pw.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			try {
				socket.shutdownInput();
				br.close();
				isr.close();
				inputStream.close();
				serverSocket.close();
			} catch (IOException e) {
			}
		}
	}
}

----------------
package com;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.Socket;
public class Client {
	public static void main(String[] args) {
		Socket socket = null;
		try {
			//创建客户端Socket 指定IP 端口
			socket = new Socket("127.0.0.1",8888);
			//获取输出流，想服务端发送消息  
			OutputStream os = socket.getOutputStream();
			//将输出流包装为打印流
			PrintWriter pw = new PrintWriter(os);
			pw.write("'用户名':'admin','密码':'123456'");
			pw.flush();
			socket.shutdownOutput();
			//获取输入流，读取客户端信息
			InputStream inputStream = socket.getInputStream();
//			 将字节流转换为字符流
			InputStreamReader isr = new InputStreamReader(inputStream);
			 //为输入流添加缓存
			BufferedReader br = new BufferedReader(isr);
			 //按行读取
			 String info = null;
			 while((info = br.readLine()) !=null ) {
				 System.out.println("我是客户端，接收到服务端信息："+info);
			 }
			 br.close();
			 isr.close();
			 inputStream.close();
			pw.close();
			os.close();
			socket.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}

---------------
加多线程，只需需要在服务端加多线程就可以了。








