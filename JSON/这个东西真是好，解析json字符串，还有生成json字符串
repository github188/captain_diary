使用JSONObject生成和解析json
1. json数据类型
类型	描述
Number	数字型
String	字符串型
Boolean	布尔型
Array	数组
Object	对象
null	空值
（1）json中不区分整数、小数等类型，而统一使用Number来存储数字。

（2）Array表示数组，以中括号"[]"括起来，元素之间以逗号分隔，元素可以为任意类型。

（3）Object表示对象，类似于C语言中的结构体，以花括号"{}"括起来，其元素要求为键值对，key必须为String类型的，而value则可为任意类型。key和value之间以":"表示映射关系，元素之间也是以逗号分隔。

2. 构建json
在eclipse中使用JSONObject需要引用org.json包，推荐通过maven引用，如果不会使用maven，搭建maven项目可参考这篇文章《使用Eclipse构建Maven项目 (step-by-step)》，引用json则参考这篇文章《maven引入json各种版本》。

温馨提示：我在构建maven项目的时候屡屡创建失败，在网上查了很久还是搞不定，后来科学上网就搞定了，如果你也创建失败，可以尝试一下。

如果是在Android Studio中，则可以直接使用。

2.1 直接构建

JSONObject obj = new JSONObject();
obj.put(key, value);
直接构建即直接实例化一个JSONObject对象，而后调用其put()方法，将数据写入。put()方法的第一个参数为key值，必须为String类型，第二个参数为value，可以为boolean、double、int、long、Object、Map以及Collection等。当然，double以及int等类型只是在Java中，写入到json中时，统一都会以Number类型存储。

范例：

import org.json.JSONObject;

public class JSONObjectSample {

    public static void main(String[] args) {
        createJson();
    }

    private static void createJson() {
        JSONObject obj = new JSONObject();
        obj.put("name", "John");
        obj.put("sex", "male");
        obj.put("age", 22);
        obj.put("is_student", true);
        obj.put("hobbies", new String[] {"hiking", "swimming"});
        //调用toString()方法可直接将其内容打印出来
        System.out.println(obj.toString());
    }

}
输出结果为：

{"hobbies":["hiking","swimming"],"sex":"male","name":"John","is_student":true,"age":22}
这里可以看到，为了压缩大小以便于更高效地传输，json把所有空格、换行符等空白符全部去掉了。如果想要直观点看其内容，可以用一些在线的json解析器看，例如：http://www.jsoneditoronline.org/

2.2 使用HashMap构建

使用HashMap构建json，实际上即先创建好一个HashMap对象并且将数据打包进去，而后在创建JSONObject时将其作为一个参数传进去。

范例：

public class JSONObjectSample {

    public static void main(String[] args) {
        createJsonByMap();
    }

    private static void createJsonByMap() {
        Map<String, Object> data = new HashMap<String, Object>();
        data.put("name", "John");
        data.put("sex", "male");
        data.put("age", 22);
        data.put("is_student", true);
        data.put("hobbies", new String[] {"hiking", "swimming"});
        
        JSONObject obj = new JSONObject(data);
        System.out.println(obj.toString());
    }

}
2.3 使用JavaBean构建

相较于前两种方法，实际开发中应用JavaBean构建json的情况更为常见，因为这样代码的重用率更高。

范例：

JavaBean：

public class PersonInfo {

    private String name;
    private String sex;
    private int age;
    private boolean isStudent;
    private String[] hobbies;
    
    public void setName(String name) {
        this.name = name;
    }
    public void setSex(String sex) {
        this.sex = sex;
    }
    public void setAge(int age) {
        this.age = age;
    }
    public void setStudent(boolean isStudent) {
        this.isStudent = isStudent;
    }
    public void setHobbies(String[] hobbies) {
        this.hobbies = hobbies;
    }
        //getter不能少
    public String getName() {
        return name;
    }
    public String getSex() {
        return sex;
    }
    public int getAge() {
        return age;
    }
    public boolean isStudent() {
        return isStudent;
    }
    public String[] getHobbies() {
        return hobbies;
    }
}
main：

import org.json.JSONObject;

public class JSONObjectSample {

    public static void main(String[] args) {
        createJsonByJavaBean();
    }

    private static void createJsonByJavaBean() {
        PersonInfo info = new PersonInfo();
        info.setName("John");
        info.setSex("male");
        info.setAge(22);
        info.setStudent(true);
        info.setHobbies(new String[] {"hiking", "swimming"});
        
        JSONObject obj = new JSONObject(info);
        System.out.println(obj);
    }

}
需要注意一点，JavaBean一定要有getter方法，否则会无法访问存储的数据。

3. 解析json
解析json主要是基本类型如Number、boolean等，与数组Array。

基本类型的解析直接调用JSONObject对象的getXxx(key)方法，如果获取字符串则getString(key)，布尔值则getBoolean(key)，以此类推。

数组的解析稍微麻烦一点，需要通过JSONObject对象的getJSONArray(key)方法获取到一个JSONArray对象，再调用JSONArray对象的get(i)方法获取数组元素，i为索引值。

范例：

首先在工程目录"src/main/java"下创建一个json文件，用于解析。

demo.json：

{
  "hobbies": [
    "hiking",
    "swimming"
  ],
  "sex": "male",
  "name": "John",
  "is_student": true,
  "age": 22
}
在pom.xml中加入对commons-io的依赖，以便于使用FileUtils进行文件访问：

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.studying</groupId>
  <artifactId>myjson</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>myjson</name>
  <url>http://maven.apache.org</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.json</groupId>
      <artifactId>json</artifactId>
      <version>20160810</version>
    </dependency>
    <!--加入对commons-io的依赖-->
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <version>2.4</version>
    </dependency>
  </dependencies>
</project>
主类：

import java.io.File;
import java.io.IOException;

import org.apache.commons.io.FileUtils;
import org.json.JSONArray;
import org.json.JSONObject;

public class JSONObjectSample {

    public static void main(String[] args) throws IOException {
        File file = new File("src/main/java/demo.json");
        String content = FileUtils.readFileToString(file);
        //对基本类型的解析
        JSONObject obj = new JSONObject(content);
        System.out.println("name：" + obj.getString("name"));
        System.out.println("sex：" + obj.getString("sex"));
        System.out.println("age" + obj.getInt("age"));
        System.out.println("is_student" + obj.getBoolean("is_student"));
        //对数组的解析
        JSONArray hobbies = obj.getJSONArray("hobbies");
        System.out.println("hobbies：");
        for (int i = 0; i < hobbies.length(); i++) {
            String s = (String) hobbies.get(i);
            System.out.println(s);
        }
    }
}
本文作学习交流用，如有错误，欢迎指正！

分类: Java基础,网络编程
标签: Java, json, 网络编程, JSONObject
好文要顶 关注我 收藏该文    
Joah
关注 - 5
粉丝 - 14
+加关注
8 1
« 上一篇：使用RandomAccessFile类对文件进行读写
» 下一篇：unity案例入门(一)(拾取游戏)
posted @ 2017-04-20 00:21 Joah 阅读(63697) 评论(4) 编辑 收藏
